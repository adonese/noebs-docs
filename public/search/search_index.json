{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to noebs \u00b6 noebs provides clean and simple json api interface to access our payment system.","title":"Welcome to noebs"},{"location":"#welcome-to-noebs","text":"noebs provides clean and simple json api interface to access our payment system.","title":"Welcome to noebs"},{"location":"_cashout/","text":"Cash out api \u00b6 Cash out service by customers to transfer reward points and loyalty into an actual cash. How it works \u00b6 In rewards system, a user usually would want to cash out their rewards. The equivalent of an actual cash is left for the store owner to decide. But, it simply means: transfer this X points into Y cash, from A card to the user's card B . API design (draft) \u00b6 Scenario 1: merchant generate token (it needs to be initiated from the client to the merchant) merchant system sends us an api token request we respond back with a token the request will include the card holder name and so Register /register \u00b6 ' { \"name\" : \"shifa\" , \"endpoint\" : \"http://localhost:8000\" } ' Generate token /generate \u00b6","title":" cashout"},{"location":"_cashout/#cash-out-api","text":"Cash out service by customers to transfer reward points and loyalty into an actual cash.","title":"Cash out api"},{"location":"_cashout/#how-it-works","text":"In rewards system, a user usually would want to cash out their rewards. The equivalent of an actual cash is left for the store owner to decide. But, it simply means: transfer this X points into Y cash, from A card to the user's card B .","title":"How it works"},{"location":"_cashout/#api-design-draft","text":"Scenario 1: merchant generate token (it needs to be initiated from the client to the merchant) merchant system sends us an api token request we respond back with a token the request will include the card holder name and so","title":"API design (draft)"},{"location":"_cashout/#register-register","text":"' { \"name\" : \"shifa\" , \"endpoint\" : \"http://localhost:8000\" } '","title":"Register /register"},{"location":"_cashout/#generate-token-generate","text":"","title":"Generate token /generate"},{"location":"biller_system/","text":"How to use noebs Biller System \u00b6 Noebs offers a simple and secure way to accept payments, through our billers system. Merchants can leverage our system to accept payments How to use the new API \u00b6 Request a new token \u00b6 Registration service \u00b6 API: /new You can register for a new noebs merchant service on https://beta.soluspay.net/api/v1/merchant/new. The step can be done too via Cashq Merchant App https://play.google.com/store/apps/details?id=net.soluspay.CashQMerchant, to simplify the registration process. Request \u00b6 ' { \"name\" : \"adonese\" , \"city\" : \"kosti\" , \"id_type\" : 1 , \"id_no\" : \"1213456\" , \"password\" : \"1214\" , \"mobile\" : \"0912141679\" , \"merchant_id\" : \"assasd\" } ' field type name string city string id_type integer mobileNo string password string merchant_id string push_id string Response \u00b6 { \"biller_name\" : \"romantic_jang\" , \"profile\" :{ \"merchant_id\" : \"romantic_jang\" , \"name\" : \"adonese\" , \"city\" : \"kosti\" , \"mobile\" : \"0912141679\" , \"id_type\" : 1 , \"id_no\" : \"1213456\" , \"push_id\" : \"\" , \"password\" : \"$2a$08$VHTQqbN.U7aZGjjELxXNyeV0Okwjj267VMa.t4keHPoUKsGjDKnsO\" , \"is_verified\" : false , \"biller_id\" : \"\" }, \"result\" : \"ok\" , \"url\" : \"https://beta.soluspay.net/api/v1/payment/romantic_jang\" } url : is needed in subsequent requests. url can be used in Cashq Merchant app to accept payment. is_verified : is by default false until our team verifies entered data. biller_name : must be stored safely as it will be a unique id assigned to the specific biller. TODO \u00b6 assumption: merchant_id is autogenerated name store autogenerated name in sql store autogenerated name in redis in payment (payment_token, and payment/:payment_id): [x] namespace is merchant_id [o] get table from sql [o] get is_verified from sql [o] get biller_id from sql authorize transactions per biller assign transactions to the biller get transactions from the biller get specific transaction using uuid token delete biller update biller info update biller ebs id get biller_id serviceProviderId from store responds accordingly First you need to initialize the paymnet, to do that head over to this link: curl -H \"content-type: application/json\" -X POST https://api.soluspay.net/api/v1/payment_token/ $biller_id ** biller_id : a biller id assigned to specific biller by noebs. Response \u00b6 The response is in terms of UUID v4 data. It is secure, and don't collide { \"result\" :{ \"id\" : \"dabceba4-2d23-41d9-9832-f4f005353ce0\" , \"uuid\" : \"dabceba4-2d23-41d9-9832-f4f005353ce0\" }, \"uuid\" : \"dabceba4-2d23-41d9-9832-f4f005353ce0\" } For now, id is the same as uuid but we might change that in the future. So use uuid for future proof integration. Use uuid in response in to build the new url https://sahil.soluspay.net?id={tawasul_reference_id}&amount={entered_amount}&token={uuid} For example: http://sahil.soluspay.net/?id=123&token=cf455236-69dd-410e-9996-c828d874d6d4&amount=50 This is the link you will be sharing in your mobile app or your website (iframe) to offer the payment ability. Timeouts \u00b6 The uuid timeouts in 1 hr Quering result API \u00b6 In case, you want to see the previous transactions, we offer a querying api. We need to use the original uuid (the one you inquired and sent through token param) and the biller id assigned to each biller to retrieve the status of a particular transaction. curl -H \"content-type: application/json\" -X POST https://api.soluspay.net/api/v1/info?id={token}&biller={biller_id} Response \u00b6 Successful response \u00b6 { \"id\" : \"some_uuid_here\" , \"terminalId\" : \"18000377\" , \"systemTraceAuditNumber\" : 76 , \"clientId\" : \"ACTS\" , \"responseMessage\" : \"Approval\" , \"responseStatus\" : \"Successful\" , \"responseCode\" : 0 , \"tranDateTime\" : \"200419085611\" , \"tranFee\" : 1.5 , \"additionalAmount\" : -1 } Failed response \u00b6 Follows our standard { \"message\" : \"Descriptive message about the error\" , \"code\" : \"error_class\" } note, in this case, the biller ID for Sahil is: biller:identifer_id . Cancel transaction \u00b6 You can also offer to your users Cancellation or do that automatically. We need to use the original uuid (the one you inquired and sent through token param) to cancel a particular transaction. curl - H \"content-type: application/json\" - X POST h tt ps : //api.soluspay. net /api/v 1 /ca n cel?id= { t oke n } Response \u00b6 Always check for status codes Successful response \u00b6 { \"result\" : true } Failed response \u00b6 Follows our standard { \"message\" : \"Descriptive message about the error\" , \"code\" : \"error_class\" }","title":"Using Special Payment"},{"location":"biller_system/#how-to-use-noebs-biller-system","text":"Noebs offers a simple and secure way to accept payments, through our billers system. Merchants can leverage our system to accept payments","title":"How to use noebs Biller System"},{"location":"biller_system/#how-to-use-the-new-api","text":"","title":"How to use the new API"},{"location":"biller_system/#request-a-new-token","text":"","title":"Request a new token"},{"location":"biller_system/#registration-service","text":"API: /new You can register for a new noebs merchant service on https://beta.soluspay.net/api/v1/merchant/new. The step can be done too via Cashq Merchant App https://play.google.com/store/apps/details?id=net.soluspay.CashQMerchant, to simplify the registration process.","title":"Registration service"},{"location":"biller_system/#request","text":"' { \"name\" : \"adonese\" , \"city\" : \"kosti\" , \"id_type\" : 1 , \"id_no\" : \"1213456\" , \"password\" : \"1214\" , \"mobile\" : \"0912141679\" , \"merchant_id\" : \"assasd\" } ' field type name string city string id_type integer mobileNo string password string merchant_id string push_id string","title":"Request"},{"location":"biller_system/#response","text":"{ \"biller_name\" : \"romantic_jang\" , \"profile\" :{ \"merchant_id\" : \"romantic_jang\" , \"name\" : \"adonese\" , \"city\" : \"kosti\" , \"mobile\" : \"0912141679\" , \"id_type\" : 1 , \"id_no\" : \"1213456\" , \"push_id\" : \"\" , \"password\" : \"$2a$08$VHTQqbN.U7aZGjjELxXNyeV0Okwjj267VMa.t4keHPoUKsGjDKnsO\" , \"is_verified\" : false , \"biller_id\" : \"\" }, \"result\" : \"ok\" , \"url\" : \"https://beta.soluspay.net/api/v1/payment/romantic_jang\" } url : is needed in subsequent requests. url can be used in Cashq Merchant app to accept payment. is_verified : is by default false until our team verifies entered data. biller_name : must be stored safely as it will be a unique id assigned to the specific biller.","title":"Response"},{"location":"biller_system/#todo","text":"assumption: merchant_id is autogenerated name store autogenerated name in sql store autogenerated name in redis in payment (payment_token, and payment/:payment_id): [x] namespace is merchant_id [o] get table from sql [o] get is_verified from sql [o] get biller_id from sql authorize transactions per biller assign transactions to the biller get transactions from the biller get specific transaction using uuid token delete biller update biller info update biller ebs id get biller_id serviceProviderId from store responds accordingly First you need to initialize the paymnet, to do that head over to this link: curl -H \"content-type: application/json\" -X POST https://api.soluspay.net/api/v1/payment_token/ $biller_id ** biller_id : a biller id assigned to specific biller by noebs.","title":"TODO"},{"location":"biller_system/#response_1","text":"The response is in terms of UUID v4 data. It is secure, and don't collide { \"result\" :{ \"id\" : \"dabceba4-2d23-41d9-9832-f4f005353ce0\" , \"uuid\" : \"dabceba4-2d23-41d9-9832-f4f005353ce0\" }, \"uuid\" : \"dabceba4-2d23-41d9-9832-f4f005353ce0\" } For now, id is the same as uuid but we might change that in the future. So use uuid for future proof integration. Use uuid in response in to build the new url https://sahil.soluspay.net?id={tawasul_reference_id}&amount={entered_amount}&token={uuid} For example: http://sahil.soluspay.net/?id=123&token=cf455236-69dd-410e-9996-c828d874d6d4&amount=50 This is the link you will be sharing in your mobile app or your website (iframe) to offer the payment ability.","title":"Response"},{"location":"biller_system/#timeouts","text":"The uuid timeouts in 1 hr","title":"Timeouts"},{"location":"biller_system/#quering-result-api","text":"In case, you want to see the previous transactions, we offer a querying api. We need to use the original uuid (the one you inquired and sent through token param) and the biller id assigned to each biller to retrieve the status of a particular transaction. curl -H \"content-type: application/json\" -X POST https://api.soluspay.net/api/v1/info?id={token}&biller={biller_id}","title":"Quering result API"},{"location":"biller_system/#response_2","text":"","title":"Response"},{"location":"biller_system/#successful-response","text":"{ \"id\" : \"some_uuid_here\" , \"terminalId\" : \"18000377\" , \"systemTraceAuditNumber\" : 76 , \"clientId\" : \"ACTS\" , \"responseMessage\" : \"Approval\" , \"responseStatus\" : \"Successful\" , \"responseCode\" : 0 , \"tranDateTime\" : \"200419085611\" , \"tranFee\" : 1.5 , \"additionalAmount\" : -1 }","title":"Successful response"},{"location":"biller_system/#failed-response","text":"Follows our standard { \"message\" : \"Descriptive message about the error\" , \"code\" : \"error_class\" } note, in this case, the biller ID for Sahil is: biller:identifer_id .","title":"Failed response"},{"location":"biller_system/#cancel-transaction","text":"You can also offer to your users Cancellation or do that automatically. We need to use the original uuid (the one you inquired and sent through token param) to cancel a particular transaction. curl - H \"content-type: application/json\" - X POST h tt ps : //api.soluspay. net /api/v 1 /ca n cel?id= { t oke n }","title":"Cancel transaction"},{"location":"biller_system/#response_3","text":"Always check for status codes","title":"Response"},{"location":"biller_system/#successful-response_1","text":"{ \"result\" : true }","title":"Successful response"},{"location":"biller_system/#failed-response_1","text":"Follows our standard { \"message\" : \"Descriptive message about the error\" , \"code\" : \"error_class\" }","title":"Failed response"},{"location":"cashout/","text":"Cash out api \u00b6 Cash out service by customers to transfer reward points and loyalty into an actual cash. A simple walkthrough for this feature will look like this: customer will request a cashout (in your app) you validate the request and send us a cashout request (including amount and id specific to you) we send you a url to conduct this payment. you return the url to your customer (as a button in the app) your customer clicks on the url and enters their info we check the request, and if it works, we run the payment request in the background the webpage will be done here for upon payment completion: we send you a json response regarding the payment (status, amount, etc) How it works \u00b6 In rewards system, a user usually would want to cash out their rewards. The equivalent of an actual cash is left for the store owner to decide. But, it simply means: transfer this X points into Y cash, from A card to the user's card B . API \u00b6 Register \u00b6 /cashout/register Register for a new cashout service. This will allow the service provider (you) to delegate us to use your card info on behalf of you to conduct the cashout service. Request \u00b6 field type name string pan string expDate string ipin string consent bool endpoint string Note name: provider unique name pan: personal account number (16, 19) digits expDate: expiration date YYmm format. consent: you accept terms of condition and allow us to use your card on behalf of you endpoint: remote endpoint we can send the cashout result into Response \u00b6 Successful transaction { \"result\" : \"ok\" } Failed transaction { \"message\" : \"Descriptive text of the error\" , \"code\" : \"error_code\" } Generate Cash out claim \u00b6 /cashout/generate/:name :name is the cashout name used in register . Generate cashout claims is used by the cashout provider backend system to generate claims for their customers. Request field type amount int id string { \"amount\" : 100 , \"id\" : \"xcx\" } Note amount: amount to be cashedout in integer id: provider specific id for the transaction (to be used by the provider to track their status) Response { \"result\" : \"2ff61013-b559-4504-9eb7-aa6749c352f0\" , \"uuid\" : \"2ff61013-b559-4504-9eb7-aa6749c352f0\" } Note result: uuid result will be used later to build the url uuid: uuid response Web hooks integrations \u00b6 Noebs cashout supports webhooks, actually for the time being we mandate the use of webhooks. Webhooks allow us to work as a mediator between noebs and our payment providers and as a result it can play greatly in scenarios where a system needs to make an update according to our actions. The request for the web hooks transaction is: { \"name\" : \"shifa\" , \"details\" :{ \"response\" : \"Generic Error\" , \"code\" : 69 , \"time\" : \"0001-01-01T00:00:00Z\" , \"amount\" : 0 }} name : is the cashout provder name Note This is the request we send in our noebs webhooks. Details is the interesting part field type response string code integer time time amount integer These tells the status of each transactions. Last step \u00b6 The cashout provider will use the newly generated uuid to build the cashout page for their customers. In the background, noebs will return the result of the transaction to the endpoint provided by the cashout provider.","title":"Cashouts and rewards points"},{"location":"cashout/#cash-out-api","text":"Cash out service by customers to transfer reward points and loyalty into an actual cash. A simple walkthrough for this feature will look like this: customer will request a cashout (in your app) you validate the request and send us a cashout request (including amount and id specific to you) we send you a url to conduct this payment. you return the url to your customer (as a button in the app) your customer clicks on the url and enters their info we check the request, and if it works, we run the payment request in the background the webpage will be done here for upon payment completion: we send you a json response regarding the payment (status, amount, etc)","title":"Cash out api"},{"location":"cashout/#how-it-works","text":"In rewards system, a user usually would want to cash out their rewards. The equivalent of an actual cash is left for the store owner to decide. But, it simply means: transfer this X points into Y cash, from A card to the user's card B .","title":"How it works"},{"location":"cashout/#api","text":"","title":"API"},{"location":"cashout/#register","text":"/cashout/register Register for a new cashout service. This will allow the service provider (you) to delegate us to use your card info on behalf of you to conduct the cashout service.","title":"Register"},{"location":"cashout/#request","text":"field type name string pan string expDate string ipin string consent bool endpoint string Note name: provider unique name pan: personal account number (16, 19) digits expDate: expiration date YYmm format. consent: you accept terms of condition and allow us to use your card on behalf of you endpoint: remote endpoint we can send the cashout result into","title":"Request"},{"location":"cashout/#response","text":"Successful transaction { \"result\" : \"ok\" } Failed transaction { \"message\" : \"Descriptive text of the error\" , \"code\" : \"error_code\" }","title":"Response"},{"location":"cashout/#generate-cash-out-claim","text":"/cashout/generate/:name :name is the cashout name used in register . Generate cashout claims is used by the cashout provider backend system to generate claims for their customers. Request field type amount int id string { \"amount\" : 100 , \"id\" : \"xcx\" } Note amount: amount to be cashedout in integer id: provider specific id for the transaction (to be used by the provider to track their status) Response { \"result\" : \"2ff61013-b559-4504-9eb7-aa6749c352f0\" , \"uuid\" : \"2ff61013-b559-4504-9eb7-aa6749c352f0\" } Note result: uuid result will be used later to build the url uuid: uuid response","title":"Generate Cash out claim"},{"location":"cashout/#web-hooks-integrations","text":"Noebs cashout supports webhooks, actually for the time being we mandate the use of webhooks. Webhooks allow us to work as a mediator between noebs and our payment providers and as a result it can play greatly in scenarios where a system needs to make an update according to our actions. The request for the web hooks transaction is: { \"name\" : \"shifa\" , \"details\" :{ \"response\" : \"Generic Error\" , \"code\" : 69 , \"time\" : \"0001-01-01T00:00:00Z\" , \"amount\" : 0 }} name : is the cashout provder name Note This is the request we send in our noebs webhooks. Details is the interesting part field type response string code integer time time amount integer These tells the status of each transactions.","title":"Web hooks integrations"},{"location":"cashout/#last-step","text":"The cashout provider will use the newly generated uuid to build the cashout page for their customers. In the background, noebs will return the result of the transaction to the endpoint provided by the cashout provider.","title":"Last step"},{"location":"dart/","text":"noebs \u00b6 A simple way to integrate with noebs apis and add payment to your applications. How to use noebs dart sdk \u00b6 import 'package:noebs/noebs.dart' ; import 'package:noebs/types.dart' ; final payment = Noebs ( apiKey: \"1233232\" , pan: \"912341234421234112\" , ipin: \"1234\" , expDate: \"2402\" , client: client ); // payment.client = client; //TODO fix the ipin block shit final i = await payment . init (); if ( i is Successful ) { // successful transaction } else if ( i is PaymentError ) { // process payment errors here print ( i . getErrorMessage ()); } // you can also make a new payment request, through the same api final payment = Noebs ( apiKey: \"1233232\" , pan: \"912341234421234112\" , ipin: \"1234\" , expDate: \"2402\" , client: client ); final i = await payment . init () // initiale the library here final res = await payment . specialPayment ( 32.32 ); // check and handle errors here For more information go to our api docs website .","title":"noebs"},{"location":"dart/#noebs","text":"A simple way to integrate with noebs apis and add payment to your applications.","title":"noebs"},{"location":"dart/#how-to-use-noebs-dart-sdk","text":"import 'package:noebs/noebs.dart' ; import 'package:noebs/types.dart' ; final payment = Noebs ( apiKey: \"1233232\" , pan: \"912341234421234112\" , ipin: \"1234\" , expDate: \"2402\" , client: client ); // payment.client = client; //TODO fix the ipin block shit final i = await payment . init (); if ( i is Successful ) { // successful transaction } else if ( i is PaymentError ) { // process payment errors here print ( i . getErrorMessage ()); } // you can also make a new payment request, through the same api final payment = Noebs ( apiKey: \"1233232\" , pan: \"912341234421234112\" , ipin: \"1234\" , expDate: \"2402\" , client: client ); final i = await payment . init () // initiale the library here final res = await payment . specialPayment ( 32.32 ); // check and handle errors here For more information go to our api docs website .","title":"How to use noebs dart sdk"},{"location":"encryption/","text":"Encryption in noebs \u00b6 While noebs offers a strong support for encryption through different sdk libraries (java, dart, js), user's can still roll out their own encryption. Get Public Key from here In Key api response, we are interested in pubKeyValue , which is the public key for encrpytion Concatenate UUID + IPIN Use RSA encrypt UUID + IPIN and encrypt them with the pubKeyValue (More technical details here copied from EBS docs): Cipher specification \u00b6 Cipher algorithm: RSA Cipher mode: ECB Padding : PKCS1Padding Example: \u00b6 Clear value = \"0000\" UUID = \"550e8400-e29b-41d4-a716-446655440000\" Encrypted value = Base64.encode(RSAencrypt(\"550e8400-e29b-41d4-a716-446655440000\"+ \"0000 \", publicKeyValue)) Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Encryption"},{"location":"encryption/#encryption-in-noebs","text":"While noebs offers a strong support for encryption through different sdk libraries (java, dart, js), user's can still roll out their own encryption. Get Public Key from here In Key api response, we are interested in pubKeyValue , which is the public key for encrpytion Concatenate UUID + IPIN Use RSA encrypt UUID + IPIN and encrypt them with the pubKeyValue (More technical details here copied from EBS docs):","title":"Encryption in noebs"},{"location":"encryption/#cipher-specification","text":"Cipher algorithm: RSA Cipher mode: ECB Padding : PKCS1Padding","title":"Cipher specification"},{"location":"encryption/#example","text":"Clear value = \"0000\" UUID = \"550e8400-e29b-41d4-a716-446655440000\" Encrypted value = Base64.encode(RSAencrypt(\"550e8400-e29b-41d4-a716-446655440000\"+ \"0000 \", publicKeyValue)) Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Example:"},{"location":"iframe/","text":"iFrame and web integrations in noebs \u00b6 Start the process by creating a new account via: Via our online onboarding portal Contact noebs team for account creations mailto:adonese@noebs.dev The team will go with you through simple integration steps, to comply with KYC in the future it will be about sending us a selfie of you + ID cards Required fields and API endpoints \u00b6 PAYMENT_URL : https://pay.cashq.app Our payment checkout is hosted at: https://pay.cashq.app . The URL for payment will be like this: https://pay.cashq.app/?biller=biller_id?id=merchant_defined_id&token=noebs_payment_uuid_token&to=redirect_url_after_payment&hooks=hooks_endpoint_for_post_payment Fields: field definition id merchant specific id, for example cart ID token noebs specific token, UUID url url to be redirect the user to, after the payment is completed hooks hooks endpoint, to send the response message to the system Important token : is requested from noebs beforehand, by calling: PAYMENT_URL/payment_token/:biller_id payment token \u00b6 Endpoint: https://beta.soluspay.net/api/v1/payment_token/:biller_id The request only have biller_id as a named url query. biller_id is noebs specific biller's name. The response would be like this: { \"result\" :{ \"id\" : \"dabceba4-2d23-41d9-9832-f4f005353ce0\" , \"uuid\" : \"dabceba4-2d23-41d9-9832-f4f005353ce0\" } Note id and uuid are the same. We recommend you to use uuid instead, just for the explicitness. id will be used later as token How the payment scenario works \u00b6 User enters to Sara website User add items to cart User proceed to checkout Sara's website performs generate payment_token api Sara's website parse the corresponding uuid from payment_token uuid will be used by Sara as token Sara can generate the payment token on events like windows.load, or make a dedicated button for that. Sara website then will have the sufficient information to complete the payment: payment token amount id (if she has an id for their cart, or 0 for default value) hooks (if she want to use noebs webhooks to update her cart system) Get billers transactions \u00b6 Endpoint: HOST_URL /v1/merchant/i?biller=:biller_id Note biller_id : is the assigned noebs biller for the particular merchant Reach out for any help or support. We will publish more examples soon! Sign up as a merchant and start accepting funds","title":"IFrame / web interface"},{"location":"iframe/#iframe-and-web-integrations-in-noebs","text":"Start the process by creating a new account via: Via our online onboarding portal Contact noebs team for account creations mailto:adonese@noebs.dev The team will go with you through simple integration steps, to comply with KYC in the future it will be about sending us a selfie of you + ID cards","title":"iFrame and web integrations in noebs"},{"location":"iframe/#required-fields-and-api-endpoints","text":"PAYMENT_URL : https://pay.cashq.app Our payment checkout is hosted at: https://pay.cashq.app . The URL for payment will be like this: https://pay.cashq.app/?biller=biller_id?id=merchant_defined_id&token=noebs_payment_uuid_token&to=redirect_url_after_payment&hooks=hooks_endpoint_for_post_payment Fields: field definition id merchant specific id, for example cart ID token noebs specific token, UUID url url to be redirect the user to, after the payment is completed hooks hooks endpoint, to send the response message to the system Important token : is requested from noebs beforehand, by calling: PAYMENT_URL/payment_token/:biller_id","title":"Required fields and API endpoints"},{"location":"iframe/#payment-token","text":"Endpoint: https://beta.soluspay.net/api/v1/payment_token/:biller_id The request only have biller_id as a named url query. biller_id is noebs specific biller's name. The response would be like this: { \"result\" :{ \"id\" : \"dabceba4-2d23-41d9-9832-f4f005353ce0\" , \"uuid\" : \"dabceba4-2d23-41d9-9832-f4f005353ce0\" } Note id and uuid are the same. We recommend you to use uuid instead, just for the explicitness. id will be used later as token","title":"payment token"},{"location":"iframe/#how-the-payment-scenario-works","text":"User enters to Sara website User add items to cart User proceed to checkout Sara's website performs generate payment_token api Sara's website parse the corresponding uuid from payment_token uuid will be used by Sara as token Sara can generate the payment token on events like windows.load, or make a dedicated button for that. Sara website then will have the sufficient information to complete the payment: payment token amount id (if she has an id for their cart, or 0 for default value) hooks (if she want to use noebs webhooks to update her cart system)","title":"How the payment scenario works"},{"location":"iframe/#get-billers-transactions","text":"Endpoint: HOST_URL /v1/merchant/i?biller=:biller_id Note biller_id : is the assigned noebs biller for the particular merchant Reach out for any help or support. We will publish more examples soon! Sign up as a merchant and start accepting funds","title":"Get billers transactions"},{"location":"java/","text":"noebs Java SDK \u00b6 Add jitpack to your build.gradle repositories { ... maven { url 'https://jitpack.io' } } Add the sdk to your dependancies dependencies { implementation 'com.github.fakhrisati:solussdk:1.0.0' } public static void main ( String [] args ) { Payment payment = new Payment ( \"gdljdfslkgjf;lgks\" , \"31323232323\" , \"3232\" , \"3232\" , 1f , \"0010050307\" ); NOEBSClient noebsClient = new NOEBSClient (); BaseResponse <?> response = noebsClient . getResponse ( payment ); Object object = response . getResponse (); if ( object instanceof Response ) { System . out . println ( true ); // handle response cases here } else if ( object instanceof ErrorResponse ){ ErrorResponse err = ( ErrorResponse ) object ; System . out . println ( err . getMessage ()); Map < String , String > details = err . getDetails (); if ( ! details . isEmpty ()) ///if details not empty show messages for ( Map . Entry m : details . entrySet ()){ System . out . println ( m . getKey () + \" : \" + m . getValue ()); } System . out . println ( false ); } else { System . out . println ( \"Error\" ); } }","title":"Java SDK"},{"location":"java/#noebs-java-sdk","text":"Add jitpack to your build.gradle repositories { ... maven { url 'https://jitpack.io' } } Add the sdk to your dependancies dependencies { implementation 'com.github.fakhrisati:solussdk:1.0.0' } public static void main ( String [] args ) { Payment payment = new Payment ( \"gdljdfslkgjf;lgks\" , \"31323232323\" , \"3232\" , \"3232\" , 1f , \"0010050307\" ); NOEBSClient noebsClient = new NOEBSClient (); BaseResponse <?> response = noebsClient . getResponse ( payment ); Object object = response . getResponse (); if ( object instanceof Response ) { System . out . println ( true ); // handle response cases here } else if ( object instanceof ErrorResponse ){ ErrorResponse err = ( ErrorResponse ) object ; System . out . println ( err . getMessage ()); Map < String , String > details = err . getDetails (); if ( ! details . isEmpty ()) ///if details not empty show messages for ( Map . Entry m : details . entrySet ()){ System . out . println ( m . getKey () + \" : \" + m . getValue ()); } System . out . println ( false ); } else { System . out . println ( \"Error\" ); } }","title":"noebs Java SDK"},{"location":"s2s/","text":"Noebs Integrations \u00b6 Essentially we have three integrations mode: server to server (in case you have a backend system) SDK integration: The client will use our SDK to integrate with our system (no encryption, easy to use, all error are handled by the sdk, etc) checkout page with Hooks: in the event you want to redirect the user to a checkout page designated for you. The simplest and most easiest form of integration. Hooks are used to integrate with your backend system to inform you about the transaction status. Or, you can use the dashboard to check the transaction status in case you don't have a backend system Server to Server \u00b6 You get to access our API endpoints directly JSON request / response IPIN calculations are done in your side Usually, server is more tailored and suitable when the client already have a backend system. The downside is the key management and encryption. API Integration \u00b6 Noebs has two schemes for API integrations: - HTTPS + RESTful APIs - gRPC endpoints For the REST APIs, the request is the same as for EBS, with one variant in the request header (API-Key) Base URL: https://beta.soluspay.net API Request Sample \u00b6 /api/v1/key Get public Key for encryption Request \u00b6 Field Type UUID string* tranDateTime string* applicationId string tranDateTime is time in ISO8601 format: YYMMDDHHmmss, for example 29/12/2020 T 11:11:00 is translated into: 201229111100 . UUID is UUID v4. Request sample \u00b6 { \"tranDateTime\" : \"200222113700\" , \"applicationId\" : \"ACTSCon\" , \"UUID\" : \"4a6ef7c4-ddfa-42bb-b555-7971e955c01a\" } Responses \u00b6 400 (Bad Request) { \"message\" : \"Request fields validation error\" , \"code\" : 400 , \"status\" : \"BadRequest\" , \"details\" : [ { \"applicationId\" : \"this field is required\" }, { \"UUID\" : \"this field is required\" } ] } 502 (EBS Errors) EBS specific Errors such as insufficient funds, destination errors, etc. { \"message\" : \"EBSError\" , \"code\" : 601 , \"status\" : \"EBSError\" , \"details\" : { \"UUID\" : \"4a6ef7c4-ddfa-42bb-b555-7971e955c01a\" , \"responseMessage\" : \"INVALID_APPLICATION_ID\" , \"responseStatus\" : \"Failed\" , \"responseCode\" : 601 , \"tranDateTime\" : \"200222113700\" } } 200 (Successful responses) { \"ebs_response\" : { \"pubKeyValue\" : \"MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBANx4gKYSMv3CrWWsxdPfxDxFvl+Is/0kc1dvMI1yNWDXI3AgdI4127KMUOv7gmwZ6SnRsHX/KAM0IPRe0+Sa0vMCAwEAAQ==\" , \"UUID\" : \"4a6ef7c4-ddfa-42bb-b555-7971e955c01a\" , \"responseMessage\" : \"Approved\" , \"responseStatus\" : \"Successful\" , \"responseCode\" : 0 , \"tranDateTime\" : \"200222113700\" } } NOTE THAT OUR RESPONSE FOR FAILURE CASES ONLY VARIES FROM EBS IN ebs_response FIELD . The rest is fully compatible with EBS. Payment Request \u00b6 EBS uses the name Special Payment for online purchases. IPIN Encryption \u00b6 You can use one of our existing encryption libraries to complete IPIN encryption. You can access it here: https://github.com/adonese/crypto Purchase / Payment API \u00b6 Endpoint: api/v1/purchase Headers: - Content-Type: application/json - API-Key Reserved for future Field Type UUID string tranDateTime string* applicationId string PAN string IPIN string expDate string tranCurrency string tranAmount number(10,2)* serviceProviderId string tranAmount only accepts 2 digits after the floating point. serviceProviderId is a biller ID (bank account) for the beneficiary. tranDateTime is time in ISO8601 format: YYMMDDHHmmss, for example 29/12/2020 T 11:11:00 is translated into: 201229111100 . Responses \u00b6 Same as for key responses. 400 (Bad Request) { \"message\" : \"Request fields validation error\" , \"code\" : 400 , \"status\" : \"BadRequest\" , \"details\" : [ { \"applicationId\" : \"this field is required\" }, { \"UUID\" : \"this field is required\" } ] } 502 (EBS Errors) EBS specific Errors such as insufficient funds, destination errors, etc. { \"message\" : \"EBSError\" , \"code\" : 601 , \"status\" : \"EBSError\" , \"details\" : { \"UUID\" : \"4a6ef7c4-ddfa-42bb-b555-7971e955c01a\" , \"responseMessage\" : \"INVALID_APPLICATION_ID\" , \"responseStatus\" : \"Failed\" , \"responseCode\" : 601 , \"tranDateTime\" : \"200222113700\" } } 200 (Successful responses) { \"ebs_response\" : { \"UUID\" : \"4a6ef7c4-ddfa-42bb-b555-7971e955c01a\" , \"responseMessage\" : \"Approved\" , \"responseStatus\" : \"Successful\" , \"responseCode\" : 0 , \"tranDateTime\" : \"200222113700\" } } Bill Payment \u00b6 (This includes: E15, Top Ups, and Electricity). Endpoint: api/v1/bill_payment Headers: - Content-Type: application/json - API-Key Reserved for future Field Type UUID string tranDateTime string* applicationId string PAN string IPIN string expDate string tranCurrency string tranAmount number(10,2)* payeeId string* paymentInfo string** payeeId is a unique identifier for Zain, MTN, Sudani, E15, and other billers * paymentInfo is specific for the payeeId: for Zain, it is a zain mobile number, for electricity it is the electricity bill number, and so on. We might need to add List of payeeId / paymentInfo \u00b6 Name payeeId paymentInfo zain 0010010001 MPHONE=09xxxxxx mtn 0010010003 MPHONE=092xxxxx sudani 0010010005 MPHONE=01xxxxxx Electricity 0010020001 METER=04xxxxxxx E15 0010050001 INVOICE_NUMBER List of all noebs billers \u00b6 Name payeeId paymentInfo zainTopUp 0010010001 MPHONE=01xxxxxx zainBillPayment 0010010002 MPHONE=01xxxxxx mtnTopUp 0010010003 MPHONE=01xxxxxx mtnBillPayment 0010010004 MPHONE=01xxxxxx sudaniTopUp 0010010005 MPHONE=01xxxxxx sudaniBillPayment 0010010006 MPHONE=01xxxxxx necPayment 0010020001 METER=meter_number zainBillInquiry 0010010002 MPHONE=01xxxxxx mtnBillInquiry 0010010004 MPHONE=01xxxxxx sudaniBillInquiry 0010010006 MPHONE=01xxxxxx moheBillInquiry 0010030002 moheBillPayment 0010030002 customsBillInquiry 0010030003 customsBillPayment 0010030003 moheArabBillInquiry 0010030004 moheArabBillPayment 0010030004 e15BillInquiry 0010050001 e15BillPayment 0010050001 How to handle E15 bill payment / bill inquiry \u00b6 E15 has two modes for paymentInfo , in case of inquiry and for payment. For inquiry, the paymentInfo field is like the following: 1,2c1,2 < Payment < SERVICEID=6/INVOICENUMBER=196222720005633673/PHONENUMBER=0912141679 --- > Inquiry > SERVICEID=2/INVOICENUMBER=196222720005633673/PHONENUMBER=0912141679 Response \u00b6 (Same as for the previous) Card to Card Transfer \u00b6 Endpoint: api/v1/p2p Headers: - Content-Type: application/json - API-Key Reserved for future Request fields \u00b6 Field Type UUID string tranDateTime string* applicationId string PAN string IPIN string expDate string tranCurrency string tranAmount number(10,2) toCard string* toCard is the destination This api also supports mobile number in future versions. gRPC integration \u00b6 We also have gRPC integrations. Contact us support@noebs.dev if you are interested in integration with gRPC. SDK integration \u00b6 Currently we provide SDKs for: Java, and JavaScript. You can get Java SDK from our open source SDK .","title":"JSON API"},{"location":"s2s/#noebs-integrations","text":"Essentially we have three integrations mode: server to server (in case you have a backend system) SDK integration: The client will use our SDK to integrate with our system (no encryption, easy to use, all error are handled by the sdk, etc) checkout page with Hooks: in the event you want to redirect the user to a checkout page designated for you. The simplest and most easiest form of integration. Hooks are used to integrate with your backend system to inform you about the transaction status. Or, you can use the dashboard to check the transaction status in case you don't have a backend system","title":"Noebs Integrations"},{"location":"s2s/#server-to-server","text":"You get to access our API endpoints directly JSON request / response IPIN calculations are done in your side Usually, server is more tailored and suitable when the client already have a backend system. The downside is the key management and encryption.","title":"Server to Server"},{"location":"s2s/#api-integration","text":"Noebs has two schemes for API integrations: - HTTPS + RESTful APIs - gRPC endpoints For the REST APIs, the request is the same as for EBS, with one variant in the request header (API-Key) Base URL: https://beta.soluspay.net","title":"API Integration"},{"location":"s2s/#api-request-sample","text":"/api/v1/key Get public Key for encryption","title":"API Request Sample"},{"location":"s2s/#request","text":"Field Type UUID string* tranDateTime string* applicationId string tranDateTime is time in ISO8601 format: YYMMDDHHmmss, for example 29/12/2020 T 11:11:00 is translated into: 201229111100 . UUID is UUID v4.","title":"Request"},{"location":"s2s/#request-sample","text":"{ \"tranDateTime\" : \"200222113700\" , \"applicationId\" : \"ACTSCon\" , \"UUID\" : \"4a6ef7c4-ddfa-42bb-b555-7971e955c01a\" }","title":"Request sample"},{"location":"s2s/#responses","text":"400 (Bad Request) { \"message\" : \"Request fields validation error\" , \"code\" : 400 , \"status\" : \"BadRequest\" , \"details\" : [ { \"applicationId\" : \"this field is required\" }, { \"UUID\" : \"this field is required\" } ] } 502 (EBS Errors) EBS specific Errors such as insufficient funds, destination errors, etc. { \"message\" : \"EBSError\" , \"code\" : 601 , \"status\" : \"EBSError\" , \"details\" : { \"UUID\" : \"4a6ef7c4-ddfa-42bb-b555-7971e955c01a\" , \"responseMessage\" : \"INVALID_APPLICATION_ID\" , \"responseStatus\" : \"Failed\" , \"responseCode\" : 601 , \"tranDateTime\" : \"200222113700\" } } 200 (Successful responses) { \"ebs_response\" : { \"pubKeyValue\" : \"MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBANx4gKYSMv3CrWWsxdPfxDxFvl+Is/0kc1dvMI1yNWDXI3AgdI4127KMUOv7gmwZ6SnRsHX/KAM0IPRe0+Sa0vMCAwEAAQ==\" , \"UUID\" : \"4a6ef7c4-ddfa-42bb-b555-7971e955c01a\" , \"responseMessage\" : \"Approved\" , \"responseStatus\" : \"Successful\" , \"responseCode\" : 0 , \"tranDateTime\" : \"200222113700\" } } NOTE THAT OUR RESPONSE FOR FAILURE CASES ONLY VARIES FROM EBS IN ebs_response FIELD . The rest is fully compatible with EBS.","title":"Responses"},{"location":"s2s/#payment-request","text":"EBS uses the name Special Payment for online purchases.","title":"Payment Request"},{"location":"s2s/#ipin-encryption","text":"You can use one of our existing encryption libraries to complete IPIN encryption. You can access it here: https://github.com/adonese/crypto","title":"IPIN Encryption"},{"location":"s2s/#purchase-payment-api","text":"Endpoint: api/v1/purchase Headers: - Content-Type: application/json - API-Key Reserved for future Field Type UUID string tranDateTime string* applicationId string PAN string IPIN string expDate string tranCurrency string tranAmount number(10,2)* serviceProviderId string tranAmount only accepts 2 digits after the floating point. serviceProviderId is a biller ID (bank account) for the beneficiary. tranDateTime is time in ISO8601 format: YYMMDDHHmmss, for example 29/12/2020 T 11:11:00 is translated into: 201229111100 .","title":"Purchase / Payment API"},{"location":"s2s/#responses_1","text":"Same as for key responses. 400 (Bad Request) { \"message\" : \"Request fields validation error\" , \"code\" : 400 , \"status\" : \"BadRequest\" , \"details\" : [ { \"applicationId\" : \"this field is required\" }, { \"UUID\" : \"this field is required\" } ] } 502 (EBS Errors) EBS specific Errors such as insufficient funds, destination errors, etc. { \"message\" : \"EBSError\" , \"code\" : 601 , \"status\" : \"EBSError\" , \"details\" : { \"UUID\" : \"4a6ef7c4-ddfa-42bb-b555-7971e955c01a\" , \"responseMessage\" : \"INVALID_APPLICATION_ID\" , \"responseStatus\" : \"Failed\" , \"responseCode\" : 601 , \"tranDateTime\" : \"200222113700\" } } 200 (Successful responses) { \"ebs_response\" : { \"UUID\" : \"4a6ef7c4-ddfa-42bb-b555-7971e955c01a\" , \"responseMessage\" : \"Approved\" , \"responseStatus\" : \"Successful\" , \"responseCode\" : 0 , \"tranDateTime\" : \"200222113700\" } }","title":"Responses"},{"location":"s2s/#bill-payment","text":"(This includes: E15, Top Ups, and Electricity). Endpoint: api/v1/bill_payment Headers: - Content-Type: application/json - API-Key Reserved for future Field Type UUID string tranDateTime string* applicationId string PAN string IPIN string expDate string tranCurrency string tranAmount number(10,2)* payeeId string* paymentInfo string** payeeId is a unique identifier for Zain, MTN, Sudani, E15, and other billers * paymentInfo is specific for the payeeId: for Zain, it is a zain mobile number, for electricity it is the electricity bill number, and so on. We might need to add","title":"Bill Payment"},{"location":"s2s/#list-of-payeeid-paymentinfo","text":"Name payeeId paymentInfo zain 0010010001 MPHONE=09xxxxxx mtn 0010010003 MPHONE=092xxxxx sudani 0010010005 MPHONE=01xxxxxx Electricity 0010020001 METER=04xxxxxxx E15 0010050001 INVOICE_NUMBER","title":"List of payeeId / paymentInfo"},{"location":"s2s/#list-of-all-noebs-billers","text":"Name payeeId paymentInfo zainTopUp 0010010001 MPHONE=01xxxxxx zainBillPayment 0010010002 MPHONE=01xxxxxx mtnTopUp 0010010003 MPHONE=01xxxxxx mtnBillPayment 0010010004 MPHONE=01xxxxxx sudaniTopUp 0010010005 MPHONE=01xxxxxx sudaniBillPayment 0010010006 MPHONE=01xxxxxx necPayment 0010020001 METER=meter_number zainBillInquiry 0010010002 MPHONE=01xxxxxx mtnBillInquiry 0010010004 MPHONE=01xxxxxx sudaniBillInquiry 0010010006 MPHONE=01xxxxxx moheBillInquiry 0010030002 moheBillPayment 0010030002 customsBillInquiry 0010030003 customsBillPayment 0010030003 moheArabBillInquiry 0010030004 moheArabBillPayment 0010030004 e15BillInquiry 0010050001 e15BillPayment 0010050001","title":"List of all noebs billers"},{"location":"s2s/#how-to-handle-e15-bill-payment-bill-inquiry","text":"E15 has two modes for paymentInfo , in case of inquiry and for payment. For inquiry, the paymentInfo field is like the following: 1,2c1,2 < Payment < SERVICEID=6/INVOICENUMBER=196222720005633673/PHONENUMBER=0912141679 --- > Inquiry > SERVICEID=2/INVOICENUMBER=196222720005633673/PHONENUMBER=0912141679","title":"How to handle E15 bill payment / bill inquiry"},{"location":"s2s/#response","text":"(Same as for the previous)","title":"Response"},{"location":"s2s/#card-to-card-transfer","text":"Endpoint: api/v1/p2p Headers: - Content-Type: application/json - API-Key Reserved for future","title":"Card to Card Transfer"},{"location":"s2s/#request-fields","text":"Field Type UUID string tranDateTime string* applicationId string PAN string IPIN string expDate string tranCurrency string tranAmount number(10,2) toCard string* toCard is the destination This api also supports mobile number in future versions.","title":"Request fields"},{"location":"s2s/#grpc-integration","text":"We also have gRPC integrations. Contact us support@noebs.dev if you are interested in integration with gRPC.","title":"gRPC integration"},{"location":"s2s/#sdk-integration","text":"Currently we provide SDKs for: Java, and JavaScript. You can get Java SDK from our open source SDK .","title":"SDK integration"}]}